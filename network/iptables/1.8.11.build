####
## iptables build
## Copyright 2023-2025 spkg developers, licensed under GPLv2
HOMEPAGE="https://www.netfilter.org/projects/iptables/"
DESCRIPTION="Linux kernel (2.4+) firewall, NAT and packet mangling tools"
LICENSE="GPLv2"
SRC_URI=("https://www.netfilter.org/projects/iptables/files/iptables-$PKG_VER.tar.xz")
#[[ $VERIFY_SIG == 1 ]] && SRC_URI+=("")
PATCHES=()
DEPS=""
BDEPS=""
RDEPS=""
setBuildENV auto make
BUILD_SEPERATE_DIR=no
ARCHS="x86 x86_64"
SLOT=0
#B=

src_prepare() {
	checkKernelConfig "NET" 					1 "Network Support"
## Networking options --->
	checkKernelConfig "NETFILTER"				1 "Network packet filtering framework (Netfilter)"
	checkKernelConfig "NETFILTER_ADVANCED" 		1 "Advanced netfilter configuration"
## Core Netfilter Configuration --->
	checkKernelConfig "NF_CONNTRACK" 			1 "Netfilter connection tracking support"
	checkKernelConfig "NETFILTER_XTABLES" 		1 "Netfilter Xtables support (required for ip_tables)"
	checkKernelConfig "NETFILTER_XT_TARGET_LOG"	1 "LOG target support"
## IP: Netfilter Configuration --->
	checkKernelConfig "IP_NF_IPTABLES" 			1 "IP tables support (required for filtering/masq/NAT)"
}

src_configure() {
	./configure --prefix=/usr \
				--disable-nftables \
				--enable-libipq
}

src_test() { :; }

src_install() {
	install_default

	cat > /etc/rc.d/rc.iptables << "EOF"
#!/bin/sh

# Begin rc.iptables

# Insert connection-tracking modules
# (not needed if built into the kernel)
modprobe nf_conntrack
modprobe xt_LOG

# Enable broadcast echo Protection
echo 1 > /proc/sys/net/ipv4/icmp_echo_ignore_broadcasts

# Disable Source Routed Packets
echo 0 > /proc/sys/net/ipv4/conf/all/accept_source_route
echo 0 > /proc/sys/net/ipv4/conf/default/accept_source_route

# Enable TCP SYN Cookie Protection
echo 1 > /proc/sys/net/ipv4/tcp_syncookies

# Disable ICMP Redirect Acceptance
echo 0 > /proc/sys/net/ipv4/conf/default/accept_redirects

# Do not send Redirect Messages
echo 0 > /proc/sys/net/ipv4/conf/all/send_redirects
echo 0 > /proc/sys/net/ipv4/conf/default/send_redirects

# Drop Spoofed Packets coming in on an interface, where responses
# would result in the reply going out a different interface.
echo 1 > /proc/sys/net/ipv4/conf/all/rp_filter
echo 1 > /proc/sys/net/ipv4/conf/default/rp_filter

# Log packets with impossible addresses.
echo 1 > /proc/sys/net/ipv4/conf/all/log_martians
echo 1 > /proc/sys/net/ipv4/conf/default/log_martians

# be verbose on dynamic ip-addresses  (not needed in case of static IP)
echo 2 > /proc/sys/net/ipv4/ip_dynaddr

# disable Explicit Congestion Notification
# too many routers are still ignorant
echo 0 > /proc/sys/net/ipv4/tcp_ecn

# Set a known state
iptables -P INPUT   DROP
iptables -P FORWARD DROP
iptables -P OUTPUT  DROP

# These lines are here in case rules are already in place and the
# script is ever rerun on the fly. We want to remove all rules and
# pre-existing user defined chains before we implement new rules.
iptables -F
iptables -X
iptables -Z

iptables -t nat -F

# Allow local-only connections
iptables -A INPUT  -i lo -j ACCEPT

# Free output on any interface to any ip for any service
# (equal to -P ACCEPT)
iptables -A OUTPUT -j ACCEPT

# Permit answers on already established connections
# and permit new connections related to established ones
# (e.g. port mode ftp)
iptables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT

# Drop any incoming MULTICAST or BROADCAST packet before logging:
# The box outputs several of them when using netbios or mDNS, and those
# appear immediately as incoming, which clutters the log.
iptables -A INPUT -m addrtype --dst-type BROADCAST,MULTICAST -j DROP

# Log everything else.
iptables -A INPUT -j LOG --log-prefix "FIREWALL:INPUT "

# End $rc_base/rc.iptables
EOF
	chmod 700 /etc/rc.d/rc.iptables

	## Install the init script
	install-init.d  iptables
}
