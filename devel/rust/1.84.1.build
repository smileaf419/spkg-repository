####
## Rust Build
## Copyright 2023-2025 spkg developers, licensed under GPLv2
HOMEPAGE="https://www.rust-lang.org/"
DESCRIPTION="Systems programming language from Mozilla"
LICENSE="MIT Apache-2.0 BSD BSD-1 BSD-2 BSD-4 UoI-NCSA"
SRC_URI=("https://static.rust-lang.org/dist/rustc-${PKG_VER}-src.tar.xz")
#[[ $VERIFY_SIG == 1 ]] && SRC_URI+=("")
PATCHES=()
DEPS="devel/openssl network/curl system/llvm system/zlib"
BDEPS="network/curl"
RDEPS=""
setBuildENV cmake make
BUILD_SEPERATE_DIR=no
ARCHS="~x86 ~x86_64"
SLOT=0
B="rustc-${PKG_VER}-src"

src_prepare() {
	sed '/MirOpt/d' -i src/bootstrap/src/core/builder/mod.rs
	[ ! -e /usr/include/libssh2.h ] || export LIBSSH2_SYS_USE_PKG_CONFIG=1
	[ ! -e /usr/include/sqlite3.h ] || export LIBSQLITE3_SYS_USE_PKG_CONFIG=1
}

src_configure() {
	mkdir -pv $D/opt/rustc-${PKG_VER}
	ln -svfn rustc-${PKG_VER} $D/opt/rustc

	cat << EOF > config.toml
# see config.toml.example for more possible options
# See the 8.4 book for an old example using shipped LLVM
# e.g. if not installing clang, or using a version before 13.0

# Tell x.py the editors have reviewed the content of this file
# and updated it to follow the major changes of the building system,
# so x.py will not warn us to do such a review.
change-id = 133207

[llvm]
# When using system llvm prefer shared libraries
link-shared = true

# Do not download pre-built LLVM, instead either use the system
# LLVM or build LLVM from the shipped source.
download-ci-llvm = false

# If building the shipped LLVM source, only enable the x86 target
# instead of all the targets supported by LLVM.
targets = "X86"

[build]
# omit docs to save time and space (default is to build them)
docs = false

# install extended tools: cargo, clippy, etc
extended = true

# Do not query new versions of dependencies online.
locked-deps = true

# Specify which extended tools (those from the default install).
tools = ["cargo", "clippy", "rustdoc", "rustfmt"]

# Use the source code shipped in the tarball for the dependencies.
# The combination of this and the "locked-deps" entry avoids downloading
# many crates from Internet, and makes the Rustc build more stable.
vendor = true

[install]
prefix = "/opt/rustc-$PKG_VER"
docdir = "share/doc/rustc-$PKG_VER"

[rust]
channel = "stable"
description = ""

# Enable the same optimizations as the official upstream build.
lto = "thin"
codegen-units = 1

# Don't download compiler components from the upstream CI:
# it's only intended for developers working on standard library
# and tools, and it only works with the Rust Git repository.
download-rustc = false

[target.x86_64-unknown-linux-gnu]
llvm-config = "/usr/bin/llvm-config"

[target.i686-unknown-linux-gnu]
llvm-config = "/usr/bin/llvm-config"
EOF
}

src_compile() {
	./x.py build
}

src_test() {
	python3 ./x.py test --verbose --no-fail-fast | tee rustc-testlog
	grep '^test result:' rustc-testlog |
		awk '{sum1 += $4; sum2 += $6} END { print sum1 " passed; " sum2 " failed" }'
}

src_install() {
	DESTDIR="$D" ./x.py install rustc std
	DESTDIR="$D" ./x.py install --stage=1 cargo clippy rustfmt

	rm -fv $D/opt/rustc-$PKG_VER/share/doc/rustc-$PKG_VER/*.old
	install -vm644 README.md $D/opt/rustc-$PKG_VER/share/doc/rustc-$PKG_VER

	install -vdm755 $D/usr/share/zsh/site-functions
	ln -sfv /opt/rustc/share/zsh/site-functions/_cargo $D/usr/share/zsh/site-functions

	mkdir -p $D/usr/share/bash-completion/completions
	mv -v $D/etc/bash_completion.d/cargo $D/usr/share/bash-completion/completions

	mkdir -p $D/etc/profile.d
	cat > $D/etc/profile.d/rustc.sh << "EOF"
pathprepend /opt/rustc/bin           PATH
EOF
}

post_install() {
	source /etc/profile
}
